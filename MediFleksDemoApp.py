{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "11d4c8c4-e885-4631-96da-ebf0e9be7a80",
   "metadata": {},
   "outputs": [],
   "source": [
    "#!pip install pandas\n",
    "#!pip install matplotlib\n",
    "#!pip install seaborn\n",
    "#!pip install scikit-learn\n",
    "#!pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "99344488-e45a-4589-86c8-87479fbda14a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting xgboost\n",
      "  Downloading xgboost-3.0.2-py3-none-manylinux_2_28_x86_64.whl (253.9 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m253.9/253.9 MB\u001b[0m \u001b[31m3.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hCollecting nvidia-nccl-cu12\n",
      "  Downloading nvidia_nccl_cu12-2.27.5-py3-none-manylinux2014_x86_64.manylinux_2_17_x86_64.whl (322.3 MB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m322.3/322.3 MB\u001b[0m \u001b[31m2.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m00:01\u001b[0m00:01\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (from xgboost) (1.23.5)\n",
      "Requirement already satisfied: scipy in /opt/conda/lib/python3.10/site-packages (from xgboost) (1.10.0)\n",
      "Installing collected packages: nvidia-nccl-cu12, xgboost\n",
      "Successfully installed nvidia-nccl-cu12-2.27.5 xgboost-3.0.2\n"
     ]
    }
   ],
   "source": [
    "!pip install xgboost"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "decc4324-3a9b-4432-9d8e-bbd3a7304e9c",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 31\u001b[0m\n\u001b[1;32m     29\u001b[0m le \u001b[38;5;241m=\u001b[39m LabelEncoder()\n\u001b[1;32m     30\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m col \u001b[38;5;129;01min\u001b[39;00m [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mJenis Kelamin\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mJumlah Obat\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHasil EEG\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mHasil MRI Kepala\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mPenurunan Frekuensi Kejang\u001b[39m\u001b[38;5;124m'\u001b[39m]:\n\u001b[0;32m---> 31\u001b[0m     df[col] \u001b[38;5;241m=\u001b[39m le\u001b[38;5;241m.\u001b[39mfit_transform(\u001b[43mdf\u001b[49m[col])\n\u001b[1;32m     33\u001b[0m \u001b[38;5;66;03m# Target encoding\u001b[39;00m\n\u001b[1;32m     34\u001b[0m df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mJenis Epilepsi (Target)\u001b[39m\u001b[38;5;124m'\u001b[39m] \u001b[38;5;241m=\u001b[39m le\u001b[38;5;241m.\u001b[39mfit_transform(df[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mJenis Epilepsi (Target)\u001b[39m\u001b[38;5;124m'\u001b[39m])\n",
      "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
     ]
    }
   ],
   "source": [
    "# ==================== Diagnosa Epilepsi ==============================#\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# Models\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "# Utils\n",
    "from sklearn.metrics import ConfusionMatrixDisplay, RocCurveDisplay\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "#df.info()\n",
    "\n",
    "# Encode label dan kategorikal\n",
    "le = LabelEncoder()\n",
    "for col in ['Jenis Kelamin', 'Jumlah Obat', 'Hasil EEG', 'Hasil MRI Kepala', 'Penurunan Frekuensi Kejang']:\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "\n",
    "# Target encoding\n",
    "df['Jenis Epilepsi (Target)'] = le.fit_transform(df['Jenis Epilepsi (Target)'])\n",
    "target_mapping = dict(zip(le.classes_, le.transform(le.classes_)))\n",
    "\n",
    "# Split into features (X) and target (y)\n",
    "X = df.drop(columns=['Jenis Epilepsi (Target)'])  # Assuming 'target' is the label column\n",
    "y = df['Jenis Epilepsi (Target)']\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Standarisasi\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "def train_model(model, params, model_name):\n",
    "    grid = GridSearchCV(model, params, cv=5, scoring='accuracy', n_jobs=-1)\n",
    "    grid.fit(X_train_scaled, y_train)\n",
    "    print(f\"Best Parameters for {model_name}:\", grid.best_params_)\n",
    "    return grid.best_estimator_\n",
    "\n",
    "models = {\n",
    "    \"LogisticRegression\": (LogisticRegression(max_iter=1000), {'C': [0.1, 1, 10]}),\n",
    "    \"KNN\": (KNeighborsClassifier(), {'n_neighbors': [3, 5, 7]}),\n",
    "    \"DecisionTree\": (DecisionTreeClassifier(), {'max_depth': [3, 5, 10]}),\n",
    "    \"RandomForest\": (RandomForestClassifier(), {'n_estimators': [50, 100], 'max_depth': [5, 10]}),\n",
    "    \"SVM\": (SVC(probability=True), {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}),\n",
    "    \"XGBoost\": (XGBClassifier(eval_metric='mlogloss'), {'n_estimators': [50, 100], 'max_depth': [3, 5]})\n",
    "}\n",
    "\n",
    "trained_models = {}\n",
    "for name, (model, params) in models.items():\n",
    "    print(f\"\\nTraining {name}...\")\n",
    "    trained_models[name] = train_model(model, params, name)\n",
    "    \n",
    "def evaluate_model(model, model_name):\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    y_proba = model.predict_proba(X_test_scaled)\n",
    "\n",
    "    print(f\"\\nClassification Report for {model_name}:\\n\")\n",
    "    print(classification_report(y_test, y_pred, target_names=target_mapping.keys()))\n",
    "\n",
    "    # Confusion matrix\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    disp = ConfusionMatrixDisplay(cm, display_labels=target_mapping.keys())\n",
    "    disp.plot(cmap='Blues')\n",
    "    plt.title(f\"Confusion Matrix - {model_name}\")\n",
    "    plt.show()\n",
    "\n",
    "    # ROC Curve\n",
    "    if y_proba.shape[1] == 3:\n",
    "        fpr = {}\n",
    "        tpr = {}\n",
    "        for i in range(3):\n",
    "            fpr[i], tpr[i], _ = roc_curve(y_test == i, y_proba[:, i])\n",
    "            plt.plot(fpr[i], tpr[i], label=f\"{list(target_mapping.keys())[i]}\")\n",
    "\n",
    "        plt.plot([0, 1], [0, 1], 'k--')\n",
    "        plt.xlabel(\"False Positive Rate\")\n",
    "        plt.ylabel(\"True Positive Rate\")\n",
    "        plt.title(f\"ROC Curve - {model_name}\")\n",
    "        plt.legend()\n",
    "        plt.grid()\n",
    "        plt.show()\n",
    "\n",
    "for name, model in trained_models.items():\n",
    "    evaluate_model(model, name)\n",
    "\n",
    "from sklearn.model_selection import learning_curve\n",
    "\n",
    "def plot_learning_curve(model, title):\n",
    "    train_sizes, train_scores, val_scores = learning_curve(\n",
    "        model, X_train_scaled, y_train, cv=5,\n",
    "        train_sizes=np.linspace(0.1, 1.0, 10), scoring='accuracy'\n",
    "    )\n",
    "    train_scores_mean = train_scores.mean(axis=1)\n",
    "    val_scores_mean = val_scores.mean(axis=1)\n",
    "\n",
    "    plt.plot(train_sizes, train_scores_mean, label='Training Accuracy')\n",
    "    plt.plot(train_sizes, val_scores_mean, label='Validation Accuracy')\n",
    "    plt.title(f'Learning Curve - {title}')\n",
    "    plt.xlabel(\"Training Size\")\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "\n",
    "# Contoh untuk Random Forest\n",
    "plot_learning_curve(trained_models['LogisticRegression'], \"Logistic Regression\")\n",
    "plot_learning_curve(trained_models['KNN'], \"KNN\")\n",
    "plot_learning_curve(trained_models['DecisionTree'], \"Decision Tree\")\n",
    "plot_learning_curve(trained_models['RandomForest'], \"Random Forest\")\n",
    "plot_learning_curve(trained_models['SVM'], \"SVM\")\n",
    "plot_learning_curve(trained_models['XGBoost'], \"XG Boost\")\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Hitung akurasi semua model\n",
    "accuracy_scores = {}\n",
    "for name, model in trained_models.items():\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    accuracy_scores[name] = acc\n",
    "\n",
    "# Plot akurasi\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x=list(accuracy_scores.keys()), y=list(accuracy_scores.values()))\n",
    "plt.ylim(0, 1)\n",
    "plt.ylabel(\"Accuracy Score\")\n",
    "plt.title(\"Perbandingan Akurasi Model untuk Klasifikasi Epilepsi\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.grid(axis='y')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "import joblib\n",
    "\n",
    "# Simpan model terbaik (misalnya kita pilih Random Forest, atau bisa ganti ke model lain sesuai evaluasi)\n",
    "final_model = trained_models['DecisionTree']  # ganti sesuai model terbaikmu\n",
    "joblib.dump(final_model, 'ModelDiagnosaEpilepsi.pkl')\n",
    "print(\"Model saved as ModelDiagnosaEpilepsi.pkl\")\n",
    "\n",
    "# ================ Diagnosa Diabetes ======================= #\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.preprocessing import LabelEncoder, StandardScaler\n",
    "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score, roc_curve\n",
    "from sklearn.pipeline import Pipeline\n",
    "\n",
    "# Models\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from xgboost import XGBClassifier\n",
    "\n",
    "# Utils\n",
    "from sklearn.metrics import ConfusionMatrixDisplay, RocCurveDisplay\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Load the dataset\n",
    "file_path = 'TestingHackathon'  # Update this if necessary\n",
    "df = pd.read_excel(\"dummy_diabetes_8000.xlsx\")\n",
    "\n",
    "# Target mapping\n",
    "target_mapping = {\n",
    "    0: \"Normal\",\n",
    "    1: \"Diabetes\"\n",
    "}\n",
    "\n",
    "# Split into features (X) and target (y)\n",
    "X = df.drop(columns=['Outcome', 'Pregnancies'])  # Assuming 'target' is the label column\n",
    "y = df['Outcome']\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Standarisasi\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "def train_model(model, params, model_name):\n",
    "    grid = GridSearchCV(model, params, cv=5, scoring='accuracy', n_jobs=-1)\n",
    "    grid.fit(X_train_scaled, y_train)\n",
    "    print(f\"Best Parameters for {model_name}:\", grid.best_params_)\n",
    "    return grid.best_estimator_\n",
    "\n",
    "models = {\n",
    "    \"LogisticRegression\": (LogisticRegression(max_iter=1000), {'C': [0.1, 1, 10]}),\n",
    "    \"KNN\": (KNeighborsClassifier(), {'n_neighbors': [3, 5, 7]}),\n",
    "    \"DecisionTree\": (DecisionTreeClassifier(), {'max_depth': [3, 5, 10]}),\n",
    "    \"RandomForest\": (RandomForestClassifier(), {'n_estimators': [50, 100], 'max_depth': [5, 10]}),\n",
    "    \"SVM\": (SVC(probability=True), {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf']}),\n",
    "    \"XGBoost\": (XGBClassifier(eval_metric='mlogloss'), {'n_estimators': [50, 100], 'max_depth': [3, 5]})\n",
    "}\n",
    "\n",
    "trained_models = {}\n",
    "for name, (model, params) in models.items():\n",
    "    print(f\"\\nTraining {name}...\")\n",
    "    trained_models[name] = train_model(model, params, name)\n",
    "    \n",
    "def evaluate_model(model, model_name):\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    y_proba = model.predict_proba(X_test_scaled)\n",
    "\n",
    "    # Fix: convert int -> label string\n",
    "    target_names = [target_mapping[i] for i in sorted(target_mapping.keys())]\n",
    "\n",
    "    print(f\"\\nClassification Report for {model_name}:\\n\")\n",
    "    print(classification_report(y_test, y_pred, target_names=target_names))\n",
    "\n",
    "    # Confusion Matrix\n",
    "    cm = confusion_matrix(y_test, y_pred)\n",
    "    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=target_names)\n",
    "    disp.plot(cmap='Blues')\n",
    "    plt.title(f\"Confusion Matrix - {model_name}\")\n",
    "    plt.show()\n",
    "\n",
    "    # ROC Curve\n",
    "    if hasattr(model, \"predict_proba\"):\n",
    "        y_proba = model.predict_proba(X_test_scaled)\n",
    "        n_classes = y_proba.shape[1]\n",
    "        for i in range(n_classes):\n",
    "            if np.any(y_test == i):\n",
    "                fpr, tpr, _ = roc_curve(y_test == i, y_proba[:, i])\n",
    "                plt.plot(fpr, tpr, label=target_names[i])\n",
    "\n",
    "        plt.plot([0, 1], [0, 1], 'k--')\n",
    "        plt.xlabel(\"False Positive Rate\")\n",
    "        plt.ylabel(\"True Positive Rate\")\n",
    "        plt.title(f\"ROC Curve - {model_name}\")\n",
    "        plt.legend()\n",
    "        plt.grid()\n",
    "        plt.show()\n",
    "    else:\n",
    "        print(f\"{model_name} does not support predict_proba(), skipping ROC Curve.\")\n",
    "\n",
    "for name, model in trained_models.items():\n",
    "    evaluate_model(model, name)\n",
    "    \n",
    "from sklearn.model_selection import learning_curve\n",
    "\n",
    "def plot_learning_curve(model, title):\n",
    "    train_sizes, train_scores, val_scores = learning_curve(\n",
    "        model, X_train_scaled, y_train, cv=5,\n",
    "        train_sizes=np.linspace(0.1, 1.0, 10), scoring='accuracy'\n",
    "    )\n",
    "    train_scores_mean = train_scores.mean(axis=1)\n",
    "    val_scores_mean = val_scores.mean(axis=1)\n",
    "\n",
    "    plt.plot(train_sizes, train_scores_mean, label='Training Accuracy')\n",
    "    plt.plot(train_sizes, val_scores_mean, label='Validation Accuracy')\n",
    "    plt.title(f'Learning Curve - {title}')\n",
    "    plt.xlabel(\"Training Size\")\n",
    "    plt.ylabel(\"Accuracy\")\n",
    "    plt.legend()\n",
    "    plt.grid()\n",
    "    plt.show()\n",
    "\n",
    "# Contoh untuk Random Forest\n",
    "plot_learning_curve(trained_models['LogisticRegression'], \"Logistic Regression\")\n",
    "plot_learning_curve(trained_models['KNN'], \"KNN\")\n",
    "plot_learning_curve(trained_models['DecisionTree'], \"Decision Tree\")\n",
    "plot_learning_curve(trained_models['RandomForest'], \"Random Forest\")\n",
    "plot_learning_curve(trained_models['SVM'], \"SVM\")\n",
    "plot_learning_curve(trained_models['XGBoost'], \"XG Boost\")\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Hitung akurasi semua model\n",
    "accuracy_scores = {}\n",
    "for name, model in trained_models.items():\n",
    "    y_pred = model.predict(X_test_scaled)\n",
    "    acc = accuracy_score(y_test, y_pred)\n",
    "    accuracy_scores[name] = acc\n",
    "\n",
    "# Plot akurasi\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x=list(accuracy_scores.keys()), y=list(accuracy_scores.values()))\n",
    "plt.ylim(0, 1)\n",
    "plt.ylabel(\"Accuracy Score\")\n",
    "plt.title(\"Perbandingan Akurasi Model untuk Klasifikasi Epilepsi\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.grid(axis='y')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "import joblib\n",
    "\n",
    "# Simpan model terbaik (misalnya kita pilih Random Forest, atau bisa ganti ke model lain sesuai evaluasi)\n",
    "final_model = trained_models['DecisionTree']  # ganti sesuai model terbaikmu\n",
    "joblib.dump(final_model, 'ModelDiagnosaDiabetes.pkl')\n",
    "print(\"Model saved as ModelDiagnosaDiabetes.pkl\")\n",
    "\n",
    "# ================ Diagnosa Serangan Jantung =============== #\n",
    "\n",
    "#Test Deploy Heart Disease App Streamlit\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import joblib\n",
    "\n",
    "# Load the dataset\n",
    "file_path = 'TestingHackathon'  # Update this if necessary\n",
    "df = pd.read_csv(\"heart.csv\")\n",
    "\n",
    "# Split into features (X) and target (y)\n",
    "X = df.drop(columns=['target'])  # Assuming 'target' is the label column\n",
    "y = df['target']\n",
    "\n",
    "# Train-test split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create pipeline with SVM model\n",
    "svm_pipeline = Pipeline([\n",
    "    ('scaler', StandardScaler()),\n",
    "    ('svc', SVC(C=1, gamma='scale', kernel='linear'))\n",
    "])\n",
    "\n",
    "# Train the model\n",
    "svm_pipeline.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = svm_pipeline.predict(X_test)\n",
    "\n",
    "# Print classification report\n",
    "print(\"Classification Report:\\n\", classification_report(y_test, y_pred))\n",
    "\n",
    "# Generate confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['No Disease', 'Disease'], yticklabels=['No Disease', 'Disease'])\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.title('Confusion Matrix')\n",
    "plt.show()\n",
    "\n",
    "# Save the model\n",
    "joblib.dump(svm_pipeline, 'ModelDiagnosaSeranganJantung.pkl')\n",
    "print(\"Model saved as 'ModelDiagnosaSeranganJantung.pkl'\")\n",
    "\n",
    "# ================ Aplikasi Streamlit ====================== #\n",
    "\n",
    "import streamlit as st\n",
    "import numpy as np\n",
    "import joblib\n",
    "\n",
    "# Load saved models\n",
    "model_epilepsi = joblib.load(\"ModelDiagnosaEpilepsi.pkl\")\n",
    "model_diabetes = joblib.load(\"ModelDiagnosaDiabetes.pkl\")\n",
    "model_jantung = joblib.load(\"ModelDiagnosaSeranganJantung.pkl\")\n",
    "\n",
    "# --- Login Page ---\n",
    "def login_page():\n",
    "    st.title(\"Selamat Datang di MediFleks.AI\")\n",
    "    if st.button(\"Start App\"):\n",
    "        st.session_state.page = \"login\"\n",
    "\n",
    "def login():\n",
    "    st.title(\"Login Page\")\n",
    "    username = st.text_input(\"Username\")\n",
    "    password = st.text_input(\"Password\", type=\"password\")\n",
    "    if st.button(\"Login\"):\n",
    "        if username == \"AdminMediFleks\" and password == \"admin123\":\n",
    "            st.session_state.page = \"choose_disease\"\n",
    "        else:\n",
    "            st.error(\"Username atau Password salah\")\n",
    "\n",
    "# --- Choose Disease Page ---\n",
    "def choose_disease():\n",
    "    st.title(\"Choose Disease\")\n",
    "    col1, col2, col3 = st.columns(3)\n",
    "\n",
    "    with col1:\n",
    "        st.subheader(\"Epilepsi\")\n",
    "        if st.button(\"Start Epilepsi\"):\n",
    "            st.session_state.page = \"epilepsi\"\n",
    "\n",
    "    with col2:\n",
    "        st.subheader(\"Diabetes\")\n",
    "        if st.button(\"Start Diabetes\"):\n",
    "            st.session_state.page = \"diabetes\"\n",
    "\n",
    "    with col3:\n",
    "        st.subheader(\"Serangan Jantung\")\n",
    "        if st.button(\"Start Jantung\"):\n",
    "            st.session_state.page = \"jantung\"\n",
    "\n",
    "# --- Epilepsi Diagnosis ---\n",
    "def diagnose_epilepsi():\n",
    "    st.title(\"Form Diagnosa Epilepsi\")\n",
    "    jk = st.selectbox(\"Jenis Kelamin\", [\"Laki-laki\", \"Perempuan\"])\n",
    "    usia = st.number_input(\"Usia\", min_value=1, max_value=100, value=10)\n",
    "    obat = st.selectbox(\"Jumlah Obat\", [1, 2, 3])\n",
    "    eeg = st.selectbox(\"Hasil EEG\", [\"Normal\", \"Sindrom epilepsi\", \"Abnormal dengan gelombang epileptiform\"])\n",
    "    mri = st.selectbox(\"Hasil MRI Kepala\", [\"Normal\", \"Abnormal Epileptogenik\", \"Abnormal non-epileptogenik\"])\n",
    "    penurunan = st.selectbox(\"Penurunan Frekuensi Kejang\", [\"Ya\", \"Tidak\"])\n",
    "\n",
    "    if st.button(\"Start Diagnosa\"):\n",
    "        input_data = np.array([[jk, usia, obat, eeg, mri, penurunan]])\n",
    "        prediction = model_epilepsi.predict(input_data)[0]\n",
    "        st.success(f\"Hasil Diagnosa: {prediction}\")\n",
    "\n",
    "        if st.button(\"Simpan hasil diagnosis\"):\n",
    "            st.success(\"Hasil diagnosis tersimpan\")\n",
    "            col1, col2 = st.columns(2)\n",
    "            with col1:\n",
    "                if st.button(\"Diagnosis penyakit lain\"):\n",
    "                    st.session_state.page = \"choose_disease\"\n",
    "            with col2:\n",
    "                if st.button(\"Keluar dari aplikasi\"):\n",
    "                    st.session_state.page = \"login\"\n",
    "\n",
    "# --- Diabetes Diagnosis ---\n",
    "def diagnose_diabetes():\n",
    "    st.title(\"Form Diagnosa Diabetes\")\n",
    "    glucose = st.number_input(\"Glucose\", 70, 200)\n",
    "    bp = st.number_input(\"Blood Pressure\", 55, 160)\n",
    "    skin = st.number_input(\"Skin Thickness\", 10, 50)\n",
    "    insulin = st.number_input(\"Insulin\", 30, 280)\n",
    "    bmi = st.number_input(\"BMI\", 18.0, 45.0)\n",
    "    dpf = st.number_input(\"Diabetes Pedigree Function\", 0.1, 3.0)\n",
    "    age = st.number_input(\"Umur\", 20, 80)\n",
    "\n",
    "    if st.button(\"Start Diagnosa\"):\n",
    "        input_data = np.array([[glucose, bp, skin, insulin, bmi, dpf, age]])\n",
    "        prediction = model_diabetes.predict(input_data)[0]\n",
    "        st.success(f\"Hasil Diagnosa: {'Positif Diabetes' if prediction == 1 else 'Negatif Diabetes'}\")\n",
    "\n",
    "        if st.button(\"Simpan hasil diagnosis\"):\n",
    "            st.success(\"Hasil diagnosis tersimpan\")\n",
    "            col1, col2 = st.columns(2)\n",
    "            with col1:\n",
    "                if st.button(\"Diagnosis penyakit lain\"):\n",
    "                    st.session_state.page = \"choose_disease\"\n",
    "            with col2:\n",
    "                if st.button(\"Keluar dari aplikasi\"):\n",
    "                    st.session_state.page = \"login\"\n",
    "\n",
    "# --- Heart Disease Diagnosis ---\n",
    "def diagnose_jantung():\n",
    "    st.title(\"Form Diagnosa Serangan Jantung\")\n",
    "    age = st.number_input(\"Age\", 1, 120, 50)\n",
    "    sex = st.selectbox(\"Sex\", [0, 1], format_func=lambda x: \"Male\" if x == 1 else \"Female\")\n",
    "    cp = st.slider(\"Chest Pain Type (CP)\", 0, 3, 1)\n",
    "    trestbps = st.number_input(\"Resting Blood Pressure\", 50, 200, 120)\n",
    "    chol = st.number_input(\"Cholesterol\", 100, 600, 200)\n",
    "    fbs = st.selectbox(\"Fasting Blood Sugar > 120\", [0, 1])\n",
    "    restecg = st.slider(\"Resting ECG\", 0, 2, 1)\n",
    "    thalach = st.number_input(\"Max Heart Rate Achieved\", 60, 250, 150)\n",
    "    exang = st.selectbox(\"Exercise Induced Angina\", [0, 1])\n",
    "    oldpeak = st.number_input(\"ST Depression\", 0.0, 10.0, 1.0)\n",
    "    slope = st.slider(\"Slope of ST Segment\", 0, 2, 1)\n",
    "    ca = st.slider(\"Major Vessels Colored\", 0, 3, 0)\n",
    "    thal = st.slider(\"Thalassemia Type\", 0, 2, 1)\n",
    "\n",
    "    if st.button(\"Start Diagnosa\"):\n",
    "        input_data = np.array([[age, sex, cp, trestbps, chol, fbs, restecg, thalach,\n",
    "                                exang, oldpeak, slope, ca, thal]])\n",
    "        prediction = model_jantung.predict(input_data)[0]\n",
    "        st.success(f\"Hasil Diagnosa: {'High Risk' if prediction == 1 else 'Low Risk'}\")\n",
    "\n",
    "        if st.button(\"Simpan hasil diagnosis\"):\n",
    "            st.success(\"Hasil diagnosis tersimpan\")\n",
    "            col1, col2 = st.columns(2)\n",
    "            with col1:\n",
    "                if st.button(\"Diagnosis penyakit lain\"):\n",
    "                    st.session_state.page = \"choose_disease\"\n",
    "            with col2:\n",
    "                if st.button(\"Keluar dari aplikasi\"):\n",
    "                    st.session_state.page = \"login\"\n",
    "\n",
    "# --- Routing Halaman ---\n",
    "if \"page\" not in st.session_state:\n",
    "    st.session_state.page = \"home\"\n",
    "\n",
    "if st.session_state.page == \"home\":\n",
    "    login_page()\n",
    "elif st.session_state.page == \"login\":\n",
    "    login()\n",
    "elif st.session_state.page == \"choose_disease\":\n",
    "    choose_disease()\n",
    "elif st.session_state.page == \"epilepsi\":\n",
    "    diagnose_epilepsi()\n",
    "elif st.session_state.page == \"diabetes\":\n",
    "    diagnose_diabetes()\n",
    "elif st.session_state.page == \"jantung\":\n",
    "    diagnose_jantung()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1777ba80-4ed6-42ea-8681-d01429358579",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
